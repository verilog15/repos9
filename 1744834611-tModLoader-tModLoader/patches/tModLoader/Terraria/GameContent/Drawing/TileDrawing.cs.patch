--- src/TerrariaNetCore/Terraria/GameContent/Drawing/TileDrawing.cs
+++ src/tModLoader/Terraria/GameContent/Drawing/TileDrawing.cs
@@ -11,33 +_,46 @@
 using Terraria.Graphics;
 using Terraria.Graphics.Capture;
 using Terraria.ID;
+using Terraria.ModLoader;
 using Terraria.ObjectData;
 using Terraria.UI;
 using Terraria.Utilities;
 
 namespace Terraria.GameContent.Drawing;
 
-public class TileDrawing
+public partial class TileDrawing
 {
-	private enum TileCounterType
+	public enum TileCounterType
 	{
 		Tree,
 		DisplayDoll,
 		HatRack,
+		/// <summary> Tile will sway as if anchored below (1x1 tile). Affected by wind and player interaction. Used automatically by tiles in <see cref="TileID.Sets.SwaysInWindBasic"/>. </summary>
 		WindyGrass,
+		/// <summary> Tile will sway as if anchored below. Affected by wind but not player interaction. Used by <see cref="TileID.PlantDetritus"/>, <see cref="TileID.Sunflower"/>. Tiles need to assign <see cref="TileID.Sets.MultiTileSway"/> and use as directed.</summary>
 		MultiTileGrass,
+		/// <summary> Tile will sway as if anchored above. Affected by wind and player interaction. Used by <see cref="TileID.Banners"/>, <see cref="TileID.Chandeliers"/>, <see cref="TileID.HangingLanterns"/>, <see cref="TileID.FireflyinaBottle"/>. Tiles need to assign <see cref="TileID.Sets.MultiTileSway"/> and use as directed. </summary>
 		MultiTileVine,
+		/// <summary> Tile chain will sway as if anchored above. Affected by wind and player interaction. Used by all varieties of <see cref="TileID.Vines"/>. Tiles need to assign <see cref="TileID.Sets.VineThreads"/> and use as directed. </summary>
 		Vine,
 		BiomeGrass,
 		VoidLens,
+		/// <summary> Tile chain will sway as if anchored below. Affected by wind and player interaction. Used by <see cref="TileID.Seaweed"/>, although seaweed grows below the wind limit so it isn't affected. Tiles need to assign <see cref="TileID.Sets.ReverseVineThreads"/> and use as directed. </summary>
 		ReverseVine,
 		TeleportationPylon,
 		MasterTrophy,
 		AnyDirectionalGrass,
+		/// <summary> Will cause <see cref="ModTile.SpecialDraw(int, int, SpriteBatch)"/> to be called. </summary>
+		CustomNonSolid,
+		/// <summary> Will cause <see cref="ModTile.SpecialDraw(int, int, SpriteBatch)"/> to be called. </summary>
+		CustomSolid,
 		Count
 	}
 
+	/// <summary>
+	/// Contains parameters for controlling how a flame overlay on a tile will be drawn. Used by <see cref="ModTile.GetTileFlameData(int, int, ref TileFlameData)"/>.
+	/// </summary>
-	private struct TileFlameData
+	public struct TileFlameData
 	{
 		public Texture2D flameTexture;
 		public ulong flameSeed;
@@ -56,8 +_,8 @@
 	private const float FORCE_FOR_MIN_WIND = 0.08f;
 	private const float FORCE_FOR_MAX_WIND = 1.2f;
 	private int _leafFrequency = 100000;
-	private int[] _specialsCount = new int[13];
+	private int[] _specialsCount = new int[(int)TileCounterType.Count];
-	private Point[][] _specialPositions = new Point[13][];
+	private Point[][] _specialPositions = new Point[(int)TileCounterType.Count][];
 	private Dictionary<Point, int> _displayDollTileEntityPositions = new Dictionary<Point, int>();
 	private Dictionary<Point, int> _hatRackTileEntityPositions = new Dictionary<Point, int>();
 	private Dictionary<Point, int> _trainingDummyTileEntityPositions = new Dictionary<Point, int>();
@@ -69,10 +_,16 @@
 	private int[] _specialTileX = new int[1000];
 	private int[] _specialTileY = new int[1000];
 	private UnifiedRandom _rand;
+	public double _treeWindCounter;
+	public double _grassWindCounter;
+	public double _sunflowerWindCounter;
+	public double _vineWindCounter;
+	/*
 	private double _treeWindCounter;
 	private double _grassWindCounter;
 	private double _sunflowerWindCounter;
 	private double _vineWindCounter;
+	*/
 	private WindGrid _windGrid = new WindGrid();
 	private bool _shouldShowInvisibleBlocks;
 	private bool _shouldShowInvisibleBlocks_LastFrame;
@@ -114,7 +_,12 @@
 
 	private Gore[] _gore => Main.gore;
 
+	/// <summary>
+	/// Registers a tile coordinate to use custom drawing code corresponding to the <see cref="TileCounterType"/> provided. This is mostly used to apply wind and player interaction effects to tiles.
+	/// <para/> For multitiles, make sure to only call this for the top left corner of the multitile to prevent duplicate draws by checking <see cref="TileObjectData.IsTopLeft(int, int)"/> first. This should be called in <c>ModTile.PreDraw</c> (or <c>GlobalTile.PreDraw</c>) and false should be returned to prevent the default tile drawing. It can also be called in <see cref="ModTile.DrawEffects(int, int, SpriteBatch, ref TileDrawInfo)"/> as well.
+	/// <para/> When <see cref="TileCounterType.CustomNonSolid"/> or <see cref="TileCounterType.CustomSolid"/> is used, <see cref="ModTile.SpecialDraw(int, int, SpriteBatch)"/> will be called to allow custom rendering. Compared to using <see cref="AddSpecialLegacyPoint(int, int)"/>, SpecialDraw will be called at 60fps rather than 15fps, the sampler state will default to PointClamp instead of LinearClamp, and adjusting for <see cref="Main.offScreenRange"/> is no longer necessary because the render target is the screen rather than the tile render targets.
+	/// </summary>
-	private void AddSpecialPoint(int x, int y, TileCounterType type)
+	public void AddSpecialPoint(int x, int y, TileCounterType type)
 	{
 		_specialPositions[(int)type][_specialsCount[(int)type]++] = new Point(x, y);
 	}
@@ -151,11 +_,11 @@
 				if (tile == null)
 					continue;
 
+				int tileStyle = 0;
 				if (tile.active()) {
 					Main.instance.LoadTiles(tile.type);
 					lookupKey.TileType = tile.type;
 					lookupKey.PaintColor = tile.color();
-					int tileStyle = 0;
 					switch (tile.type) {
 						case 5:
 							tileStyle = GetTreeBiome(j, i, tile.frameX, tile.frameY);
@@ -179,12 +_,13 @@
 				}
 
 				if (!prepareLazily)
-					MakeExtraPreparations(tile, j, i);
+					MakeExtraPreparations(tile, j, i, tileStyle);
 			}
 		}
 	}
 
+	//TML: Added tileStyle parameter.
-	private void MakeExtraPreparations(Tile tile, int x, int y)
+	private void MakeExtraPreparations(Tile tile, int x, int y, int tileStyle)
 	{
 		switch (tile.type) {
 			case 5: {
@@ -268,9 +_,24 @@
 			}
 			case 323: {
 				int textureIndex = 15;
+				bool isOcean = false;
+
 				if (x >= WorldGen.beachDistance && x <= Main.maxTilesX - WorldGen.beachDistance)
+					isOcean = true;
+
+				if (isOcean)
 					textureIndex = 21;
 
+				// Modded Palm Tree Leafage is indexed at -2 * growOnTile.type for Ocean, and -(2 * growOnTile.type + 1) for Oasis
+				// This unique selection is to avoid collision with ModTree leafage
+				if (Math.Abs(tileStyle) >= ModPalmTree.VanillaStyleCount) {
+					textureIndex = (Math.Abs(tileStyle) - ModPalmTree.VanillaStyleCount);
+					textureIndex *= -2;
+
+					if (!isOcean)
+						textureIndex -= 1;
+				}
+
 				TilePaintSystemV2.TreeFoliageVariantKey treeFoliageVariantKey = default(TilePaintSystemV2.TreeFoliageVariantKey);
 				treeFoliageVariantKey.TextureIndex = textureIndex;
 				treeFoliageVariantKey.PaintColor = tile.color();
@@ -321,7 +_,10 @@
 			_specialsCount[9] = 0;
 			_specialsCount[10] = 0;
 			_specialsCount[11] = 0;
+			_specialsCount[(int)TileCounterType.CustomNonSolid] = 0;
 		}
+		if(solidLayer && flag)
+			_specialsCount[(int)TileCounterType.CustomSolid] = 0;
 	}
 
 	public void PostDrawTiles(bool solidLayer, bool forRenderTargets, bool intoRenderTargets)
@@ -338,12 +_,14 @@
 			DrawTrees();
 			DrawVines();
 			DrawReverseVines();
+			DrawCustom(solidLayer);
 			Main.spriteBatch.End();
 		}
 
 		if (solidLayer && !intoRenderTargets) {
 			DrawEntities_HatRacks();
 			DrawEntities_DisplayDolls();
+			DrawCustom(solidLayer);
 		}
 	}
 
@@ -396,8 +_,10 @@
 		byte b = (byte)(100f + 150f * Main.martianLight);
 		_martianGlow = new Color(b, b, b, 0);
 		TileDrawInfo value = _currentTileDrawInfo.Value;
-		for (int i = firstTileY; i < lastTileY + 4; i++) {
-			for (int j = firstTileX - 2; j < lastTileX + 2; j++) {
+
+		//TML: Swapped loop iteration order to improve memory access linearity. Minor perf improvement, may cause slight visual discrepancies with tiles that overdraw
+		for (int j = firstTileX - 2; j < lastTileX + 2; j++) {
+			for (int i = firstTileY; i < lastTileY + 4; i++) {
 				Tile tile = Main.tile[j, i];
 				if (tile == null) {
 					tile = new Tile();
@@ -417,6 +_,9 @@
 					if (!TextureAssets.Tile[type].IsLoaded)
 						Main.instance.LoadTiles(type);
 
+					if (!TileLoader.PreDraw(j, i, type, Main.spriteBatch))
+						goto PostDraw;
+
 					switch (type) {
 						case 52:
 						case 62:
@@ -554,6 +_,9 @@
 					}
 
 					DrawSingleTile(value, solidLayer, waterStyleOverride, unscaledPosition, vector, j, i);
+
+					PostDraw:
+					TileLoader.PostDraw(j, i, type, Main.spriteBatch);
 				}
 			}
 		}
@@ -575,7 +_,10 @@
 			TimeLogger.DrawTime(1, stopwatch.Elapsed.TotalMilliseconds);
 	}
 
+	/// <summary>
+	/// Finds the top of a tile chain of vine tiles and calls <see cref="AddSpecialPoint"/> using <see cref="TileCounterType.Vine"/> if not already registered for custom drawing. See <see cref="TileID.Sets.VineThreads"/>.
+	/// </summary>
-	private void CrawlToTopOfVineAndAddSpecialPoint(int j, int i)
+	public void CrawlToTopOfVineAndAddSpecialPoint(int j, int i)
 	{
 		int y = j;
 		for (int num = j - 1; num > 0; num--) {
@@ -593,7 +_,10 @@
 		}
 	}
 
+	/// <summary>
+	/// Finds the bottom of a tile chain of reverse vine tiles and calls <see cref="AddSpecialPoint"/> using <see cref="TileCounterType.ReverseVine"/> if not already registered for custom drawing. See <see cref="TileID.Sets.ReverseVineThreads"/>.
+	/// </summary>
-	private void CrawlToBottomOfReverseVineAndAddSpecialPoint(int j, int i)
+	public void CrawlToBottomOfReverseVineAndAddSpecialPoint(int j, int i)
 	{
 		int y = j;
 		for (int k = j; k < Main.maxTilesY; k++) {
@@ -629,7 +_,7 @@
 		if (TileID.Sets.HasOutlines[drawData.typeCache])
 			GetTileOutlineInfo(tileX, tileY, drawData.typeCache, ref drawData.tileLight, ref highlightTexture, ref highlightColor);
 
-		if (_localPlayer.dangerSense && IsTileDangerous(_localPlayer, drawData.tileCache, drawData.typeCache)) {
+		if (_localPlayer.dangerSense && IsTileDangerous(tileX, tileY, _localPlayer, drawData.tileCache, drawData.typeCache)) {
 			if (drawData.tileLight.R < byte.MaxValue)
 				drawData.tileLight.R = byte.MaxValue;
 
@@ -648,7 +_,7 @@
 			}
 		}
 
-		if (_localPlayer.findTreasure && Main.IsTileSpelunkable(drawData.typeCache, drawData.tileFrameX, drawData.tileFrameY)) {
+		if (_localPlayer.findTreasure && Main.IsTileSpelunkable(tileX, tileY, drawData.typeCache, drawData.tileFrameX, drawData.tileFrameY)) {
 			if (drawData.tileLight.R < 200)
 				drawData.tileLight.R = 200;
 
@@ -665,7 +_,7 @@
 
 		if (_localPlayer.biomeSight) {
 			Color sightColor = Color.White;
-			if (Main.IsTileBiomeSightable(drawData.typeCache, drawData.tileFrameX, drawData.tileFrameY, ref sightColor)) {
+			if (Main.IsTileBiomeSightable(tileX, tileY, drawData.typeCache, drawData.tileFrameX, drawData.tileFrameY, ref sightColor)) {
 				if (drawData.tileLight.R < sightColor.R)
 					drawData.tileLight.R = sightColor.R;
 
@@ -715,11 +_,16 @@
 
 		Rectangle rectangle = new Rectangle(drawData.tileFrameX + drawData.addFrX, drawData.tileFrameY + drawData.addFrY, drawData.tileWidth, drawData.tileHeight - drawData.halfBrickHeight);
 		Vector2 vector = new Vector2((float)(tileX * 16 - (int)screenPosition.X) - ((float)drawData.tileWidth - 16f) / 2f, tileY * 16 - (int)screenPosition.Y + drawData.tileTop + drawData.halfBrickHeight) + screenOffset;
+		/*
 		if (!flag)
 			return;
+		*/
 
 		drawData.colorTint = Color.White;
 		drawData.finalColor = GetFinalLight(drawData.tileCache, drawData.typeCache, drawData.tileLight, drawData.colorTint);
+		TileLoader.DrawEffects(tileX, tileY, drawData.typeCache, Main.spriteBatch, ref drawData);
+		if (!flag)
+			return;
 		switch (drawData.typeCache) {
 			case 136:
 				switch (drawData.tileFrameX / 18) {
@@ -974,7 +_,13 @@
 		}
 	}
 
+	/// <summary>
+	/// Returns true if the tile is visible.
+	/// <para/>Tiles painted with Echo Coating as well as the Echo Platform, Echo Block, and Ghostly Stinkbug Blocker tiles will all be invisible unless the player has Echo Sight (Nearby active Echo Chamber tile or wearing Spectre Goggles)
+	/// </summary>
+	/// <param name="tile"></param>
+	/// <returns></returns>
-	private bool IsVisible(Tile tile)
+	public static bool IsVisible(Tile tile)
 	{
 		bool flag = tile.invisibleBlock();
 		switch (tile.type) {
@@ -989,12 +_,12 @@
 		}
 
 		if (flag)
-			return _shouldShowInvisibleBlocks;
+			return Main.instance.TilesRenderer._shouldShowInvisibleBlocks;
 
 		return true;
 	}
 
-	private Texture2D GetTileDrawTexture(Tile tile, int tileX, int tileY)
+	public Texture2D GetTileDrawTexture(Tile tile, int tileX, int tileY)
 	{
 		Texture2D result = TextureAssets.Tile[tile.type].Value;
 		int tileStyle = 0;
@@ -1010,6 +_,25 @@
 				if (IsAlchemyPlantHarvestable(tile.frameX / 18))
 					num = 84;
 				Main.instance.LoadTiles(num);
+				break;
+			case 80:
+			case 227:
+				WorldGen.GetCactusType(tileX, tileY, tile.frameX, tile.frameY, out int sandType);
+
+				if (!TileLoader.CanGrowModCactus(sandType))
+					break;
+
+				if (num == 80) {
+					tileStyle = sandType + 1;
+					break;
+				}
+
+				if (tile.frameX == 204 || tile.frameX == 202) {
+					var asset = PlantLoader.GetCactusFruitTexture(sandType);
+					if (asset != null)
+						return asset.Value;
+				}
+
 				break;
 		}
 
@@ -1020,7 +_,7 @@
 		return result;
 	}
 
-	private Texture2D GetTileDrawTexture(Tile tile, int tileX, int tileY, int paintOverride)
+	public Texture2D GetTileDrawTexture(Tile tile, int tileX, int tileY, int paintOverride)
 	{
 		Texture2D result = TextureAssets.Tile[tile.type].Value;
 		int tileStyle = 0;
@@ -1036,6 +_,26 @@
 				if (IsAlchemyPlantHarvestable(tile.frameX / 18))
 					num = 84;
 				Main.instance.LoadTiles(num);
+				break;
+			// Whole case below is TML code.
+			case 80:
+			case 227:
+				WorldGen.GetCactusType(tileX, tileY, tile.frameX, tile.frameY, out int sandType);
+
+				if (!TileLoader.CanGrowModCactus(sandType))
+					break;
+
+				if (num == 80) {
+					tileStyle = sandType + 1;
+					break;
+				}
+
+				if (tile.frameX == 204 || tile.frameX == 202) {
+					var asset = PlantLoader.GetCactusFruitTexture(sandType);
+					if (asset != null)
+						return asset.Value;
+				}
+
 				break;
 		}
 
@@ -1181,6 +_,7 @@
 				value4 = normalTileRect;
 				value4.Y = 0;
 				value4.Height = 10;
+				value4.X %= num10 < 3 ? 108 : 54; // Added by TML. Accounts for tilesheets with multiple columns
 				Main.spriteBatch.Draw(TextureAssets.CageTop[num10].Value, position, value4, drawData.finalColor, 0f, _zero, 1f, drawData.tileSpriteEffect, 0f);
 			}
 			else {
@@ -1265,12 +_,21 @@
 			case 662:
 				return 4;
 			default:
+				if (TileLoader.CanGrowModTree(Main.tile[x, y].type))
+					return ModTree.VanillaStyleCount + Main.tile[x, y].type;
+
 				return -1;
 		}
 	}
 
-	private TileFlameData GetTileFlameData(int tileX, int tileY, int type, int tileFrameY)
+	public TileFlameData GetTileFlameData(int tileX, int tileY, int type, int tileFrameY)
 	{
+		if (type >= TileID.Count) {
+			TileFlameData tileFlameData = default(TileFlameData);
+			TileLoader.GetTile(type)?.GetTileFlameData(tileX, tileY, ref tileFlameData);
+			return tileFlameData;
+		}
+
 		switch (type) {
 			case 270: {
 				TileFlameData tileFlameData = default(TileFlameData);
@@ -2359,6 +_,9 @@
 		if (WorldGen.IsPalmOasisTree(x))
 			num += 4;
 
+		if (Main.tile[x, y].active() && TileLoader.CanGrowModPalmTree(Main.tile[x, y].type))
+			num = (ModPalmTree.VanillaStyleCount + Main.tile[x,y].type) * (WorldGen.IsPalmOasisTree(x) ? -1 : 1);
+
 		return num;
 	}
 
@@ -2877,7 +_,8 @@
 		vertices.TopRightColor *= num7;
 		bool flag7 = false;
 		if (flag6) {
+			int totalCount = LoaderManager.Get<WaterStylesLoader>().TotalCount;
-			for (int i = 0; i < 15; i++) {
+			for (int i = 0; i < totalCount; i++) {
 				if (Main.IsLiquidStyleWater(i) && Main.liquidAlpha[i] > 0f && i != num2) {
 					DrawPartialLiquid(!solidLayer, tileCache, ref position, ref liquidSize, i, ref vertices);
 					flag7 = true;
@@ -3112,7 +_,8 @@
 		}
 	}
 
-	private static bool IsTileDangerous(Player localPlayer, Tile tileCache, ushort typeCache)
+	//TML: Added x/y for hook compatibility, made internal. Public variant in partial TML class
+	internal static bool IsTileDangerous(int tileX, int tileY, Player localPlayer, Tile tileCache, ushort typeCache)
 	{
 		bool flag = false || typeCache == 135 || typeCache == 137 || TileID.Sets.Boulders[typeCache] || typeCache == 141 || typeCache == 210 || typeCache == 442 || typeCache == 443 || typeCache == 444 || typeCache == 411 || typeCache == 485 || typeCache == 85 || typeCache == 654 || (typeCache == 314 && Minecart.IsPressurePlate(tileCache));
 		flag |= Main.getGoodWorld && typeCache == 230;
@@ -3122,10 +_,14 @@
 			if (!localPlayer.fireWalk)
 				flag = flag || typeCache == 37 || typeCache == 58 || typeCache == 76;
 
+			// Extra patch context.
 			if (!localPlayer.iceSkate)
 				flag = flag || typeCache == 162;
 		}
 
+		if (TileLoader.IsTileDangerous(tileX, tileY, typeCache, localPlayer) is bool modded)
+			return modded;
+
 		return flag;
 	}
 
@@ -3137,7 +_,7 @@
 		return _tileSolid[typeCache];
 	}
 
-	private void GetTileOutlineInfo(int x, int y, ushort typeCache, ref Color tileLight, ref Texture2D highlightTexture, ref Color highlightColor)
+	public void GetTileOutlineInfo(int x, int y, ushort typeCache, ref Color tileLight, ref Texture2D highlightTexture, ref Color highlightColor)
 	{
 		if (Main.InSmartCursorHighlightArea(x, y, out var actuallySelected)) {
 			int num = (tileLight.R + tileLight.G + tileLight.B) / 3;
@@ -3177,9 +_,9 @@
 		}
 	}
 
-	private bool InAPlaceWithWind(int x, int y, int width, int height) => WorldGen.InAPlaceWithWind(x, y, width, height);
+	public bool InAPlaceWithWind(int x, int y, int width, int height) => WorldGen.InAPlaceWithWind(x, y, width, height);
 
-	private void GetTileDrawData(int x, int y, Tile tileCache, ushort typeCache, ref short tileFrameX, ref short tileFrameY, out int tileWidth, out int tileHeight, out int tileTop, out int halfBrickHeight, out int addFrX, out int addFrY, out SpriteEffects tileSpriteEffect, out Texture2D glowTexture, out Rectangle glowSourceRect, out Color glowColor)
+	public void GetTileDrawData(int x, int y, Tile tileCache, ushort typeCache, ref short tileFrameX, ref short tileFrameY, out int tileWidth, out int tileHeight, out int tileTop, out int halfBrickHeight, out int addFrX, out int addFrY, out SpriteEffects tileSpriteEffect, out Texture2D glowTexture, out Rectangle glowSourceRect, out Color glowColor)
 	{
 		tileTop = 0;
 		tileWidth = 16;
@@ -3255,6 +_,10 @@
 				tileWidth = 20;
 				tileHeight = 20;
 				int treeBiome = GetTreeBiome(x, y, tileFrameX, tileFrameY);
+
+				if (treeBiome >= ModTree.VanillaStyleCount)
+					break;
+
 				tileFrameX += (short)(176 * (treeBiome + 1));
 				break;
 			}
@@ -3279,6 +_,12 @@
 				tileWidth = 20;
 				tileHeight = 20;
 				int palmTreeBiome = GetPalmTreeBiome(x, y);
+
+				if (Math.Abs(palmTreeBiome) >= ModPalmTree.VanillaStyleCount) {
+					tileFrameY = (short)(22 * (palmTreeBiome < 0 ? 1 : 0));
+					break;
+				}
+
 				tileFrameY = (short)(22 * palmTreeBiome);
 				break;
 			}
@@ -4848,9 +_,16 @@
 					glowColor = _meteorGlow;
 				}
 
+				// Extra patch context.
+
 				break;
 			}
 		}
+
+		// End of GetTileDrawData
+		TileLoader.SetSpriteEffects(x, y, typeCache, ref tileSpriteEffect);
+		TileLoader.SetDrawPositions(x, y, ref tileWidth, ref tileTop, ref tileHeight, ref tileFrameX, ref tileFrameY);
+		TileLoader.SetAnimationFrame(typeCache, x, y, ref addFrX, ref addFrY);
 	}
 
 	private bool IsWindBlocked(int x, int y)
@@ -4868,21 +_,21 @@
 		return false;
 	}
 
-	private int GetWaterAnimalCageFrame(int x, int y, int tileFrameX, int tileFrameY)
+	public static int GetWaterAnimalCageFrame(int x, int y, int tileFrameX, int tileFrameY)
 	{
 		int num = x - tileFrameX / 18;
 		int num2 = y - tileFrameY / 18;
 		return num / 2 * (num2 / 3) % Main.cageFrames;
 	}
 
-	private int GetSmallAnimalCageFrame(int x, int y, int tileFrameX, int tileFrameY)
+	public static int GetSmallAnimalCageFrame(int x, int y, int tileFrameX, int tileFrameY)
 	{
 		int num = x - tileFrameX / 18;
 		int num2 = y - tileFrameY / 18;
 		return num / 3 * (num2 / 3) % Main.cageFrames;
 	}
 
-	private int GetBigAnimalCageFrame(int x, int y, int tileFrameX, int tileFrameY)
+	public static int GetBigAnimalCageFrame(int x, int y, int tileFrameX, int tileFrameY)
 	{
 		int num = x - tileFrameX / 18;
 		int num2 = y - tileFrameY / 18;
@@ -4922,18 +_,36 @@
 		if (solidLayer) {
 			_displayDollTileEntityPositions.Clear();
 			_hatRackTileEntityPositions.Clear();
+			/*
 			_vineRootsPositions.Clear();
 			_reverseVineRootsPositions.Clear();
+			*/
+			return;
 		}
+
+		//TML: Moved so positions get cleared and added in the same frame.
+		_vineRootsPositions.Clear();
+		_reverseVineRootsPositions.Clear();
 	}
 
+	/// <inheritdoc cref="AddSpecialLegacyPoint(int, int)"/>
-	private void AddSpecialLegacyPoint(Point p)
+	public void AddSpecialLegacyPoint(Point p)
 	{
 		AddSpecialLegacyPoint(p.X, p.Y);
 	}
 
+	/// <summary>
+	/// Registers a tile coordinate to have additional drawing code executed after all tiles are drawn. <see cref="ModTile.SpecialDraw"/> (or <see cref="GlobalTile.SpecialDraw(int, int, int, SpriteBatch)"/>) will be called with the same coordinates after all tiles have been rendered. For multitiles, make sure to only call this for the top left corner of the multitile to prevent duplicate draws by checking <see cref="TileObjectData.IsTopLeft(int, int)"/> first. This should be called in <see cref="ModTile.DrawEffects(int, int, SpriteBatch, ref TileDrawInfo)"/> (or <see cref="GlobalTile.DrawEffects(int, int, int, SpriteBatch, ref TileDrawInfo)"/>)
+	/// <para/> This is useful for drawing additional visuals which overlap multiple tiles.
+	/// <para/> Some examples include how the <see cref="TileID.LihzahrdAltar"/> draws a sun texture hovering over the tile and how <see cref="TileID.ItemFrame"/> draws the contained item sprite over the tile.
+	/// <para/> This additional drawing will draw to the tile rendering targets, meaning it will render at 15fps and requires adjusting for <see cref="Main.offScreenRange"/>. As mentioned in <see cref="ModTile.AnimateTile(ref int, ref int)"/>, any animation done using this method should stick to animating at multiples of 4 frames to avoid jerky animation. For smoother animations <see cref="AddSpecialPoint(int, int, TileCounterType)"/> can be used with <see cref="TileCounterType.CustomSolid"/> or CustomNonSolid to render at full frame rate.
+	/// </summary>
-	private void AddSpecialLegacyPoint(int x, int y)
+	public void AddSpecialLegacyPoint(int x, int y)
 	{
+		// Protection against too many special tiles
+		if (_specialTilesCount >= _specialTileX.Length)
+			return;
+
 		_specialTileX[_specialTilesCount] = x;
 		_specialTileY[_specialTilesCount] = y;
 		_specialTilesCount++;
@@ -4949,7 +_,7 @@
 		_specialTilesCount = 0;
 	}
 
-	private Color DrawTiles_GetLightOverride(int j, int i, Tile tileCache, ushort typeCache, short tileFrameX, short tileFrameY, Color tileLight)
+	public Color DrawTiles_GetLightOverride(int j, int i, Tile tileCache, ushort typeCache, short tileFrameX, short tileFrameY, Color tileLight)
 	{
 		if (tileCache.fullbrightBlock())
 			return Color.White;
@@ -4998,9 +_,10 @@
 		return tileLight;
 	}
 
-	private void DrawTiles_EmitParticles(int j, int i, Tile tileCache, ushort typeCache, short tileFrameX, short tileFrameY, Color tileLight)
+	public void DrawTiles_EmitParticles(int j, int i, Tile tileCache, ushort typeCache, short tileFrameX, short tileFrameY, Color tileLight)
 	{
 		bool num = IsVisible(tileCache);
+		TileLoader.EmitParticles(i, j, tileCache, typeCache, tileFrameX, tileFrameY, tileLight, num);
 		int leafFrequency = _leafFrequency;
 		leafFrequency /= 4;
 		if (typeCache == 244 && tileFrameX == 18 && tileFrameY == 18 && _rand.Next(2) == 0) {
@@ -5544,14 +_,28 @@
 		}
 	}
 
+	/// <summary>
+	/// Emits a single living tree leaf or other gore instance directly below the target tile.<br/>
+	/// With a 50% chance, also emits a second leaf or other gore instance directly to the side of the target tile, dependent on wind direction.<br/>
+	/// Used by vanilla's two types of Living Trees, from which this method and its two submethods get their collective name.<br/>
+	/// </summary>
+	/// <param name="i">The X coordinate of the target tile.</param>
+	/// <param name="j">The Y coordinate of the target tile.</param>
+	/// <param name="leafGoreType">The numerical ID of the leaf or other gore instance that should be spawned.</param>
-	private void EmitLivingTreeLeaf(int i, int j, int leafGoreType)
+	public void EmitLivingTreeLeaf(int i, int j, int leafGoreType)
 	{
 		EmitLivingTreeLeaf_Below(i, j, leafGoreType);
 		if (_rand.Next(2) == 0)
 			EmitLivingTreeLeaf_Sideways(i, j, leafGoreType);
 	}
 
+	/// <summary>
+	/// Emits a single living tree leaf or other gore instance directly below the target tile.<br/>
+	/// </summary>
+	/// <param name="x">The X coordinate of the target tile.</param>
+	/// <param name="y">The Y coordinate of the target tile.</param>
+	/// <param name="leafGoreType">The numerical ID of the leaf or other gore instance that should be spawned.</param>
-	private void EmitLivingTreeLeaf_Below(int x, int y, int leafGoreType)
+	public void EmitLivingTreeLeaf_Below(int x, int y, int leafGoreType)
 	{
 		Tile tile = Main.tile[x, y + 1];
 		if (!WorldGen.SolidTile(tile) && tile.liquid <= 0) {
@@ -5561,7 +_,13 @@
 		}
 	}
 
+	/// <summary>
+	/// Emits a single living tree leaf or other gore instance directly to the side of the target tile, dependent on wind direction.<br/>
+	/// </summary>
+	/// <param name="x">The X coordinate of the target tile.</param>
+	/// <param name="y">The Y coordinate of the target tile.</param>
+	/// <param name="leafGoreType">The numerical ID of the leaf or other gore instance that should be spawned.</param>
-	private void EmitLivingTreeLeaf_Sideways(int x, int y, int leafGoreType)
+	public void EmitLivingTreeLeaf_Sideways(int x, int y, int leafGoreType)
 	{
 		int num = 0;
 		if (Main.WindForVisuals > 0.2f)
@@ -5603,7 +_,10 @@
 		rectangle.Y -= 100;
 		rectangle.Height = 400;
 		for (int k = 0; k < 600; k++) {
+			/*
 			if (_gore[k].active && ((_gore[k].type >= 706 && _gore[k].type <= 717) || _gore[k].type == 943 || _gore[k].type == 1147 || (_gore[k].type >= 1160 && _gore[k].type <= 1162))) {
+			*/
+			if (_gore[k].active && GoreID.Sets.LiquidDroplet[_gore[k].type]) {
 				Rectangle value = new Rectangle((int)_gore[k].position.X, (int)_gore[k].position.Y, 16, 16);
 				if (rectangle.Intersects(value))
 					return;
@@ -5618,6 +_,8 @@
 			type = 706;
 		else if (Main.waterStyle == 12)
 			type = 1147;
+		else if (Main.waterStyle >= Main.maxLiquidTypes)
+			type = LoaderManager.Get<WaterStylesLoader>().Get(Main.waterStyle).GetDropletGore();
 		else if (Main.waterStyle > 1)
 			type = 706 + Main.waterStyle - 1;
 
@@ -5643,7 +_,17 @@
 		_gore[num2].velocity *= 0f;
 	}
 
+	/// <summary>
+	/// Fetches the degree to which wind would/should affect a tile at the given location.
+	/// </summary>
+	/// <param name="x">The X coordinate of the theoretical target tile.</param>
+	/// <param name="y">The Y coordinate of the theoretical target tile.</param>
+	/// <param name="windCounter"></param>
+	/// <returns>
+	/// If <see cref="Main.SettingsEnabled_TilesSwayInWind"/> is false or the tile is below surface level, 0.<br/>
+	/// Otherwise, returns a value from 0.08f to 0.18f.
+	/// </returns>
-	private float GetWindCycle(int x, int y, double windCounter)
+	public float GetWindCycle(int x, int y, double windCounter)
 	{
 		if (!Main.SettingsEnabled_TilesSwayInWind)
 			return 0f;
@@ -5667,7 +_,22 @@
 		return num2 * lerpValue;
 	}
 
+	/// <summary>
+	/// Determines whether or not the tile at the given location should be able to sway in the wind.
+	/// </summary>
+	/// <param name="x">The X coordinate of the given tile.</param>
+	/// <param name="y">The Y coordinate of the given tile.</param>
+	/// <param name="tileCache">The tile to determine the sway-in-wind-ability of.</param>
+	/// <returns>
+	/// False if something dictates that the tile should NOT be able to sway in the wind; returns true by default.<br/>
+	/// Vanilla conditions that prevent wind sway are, in this order:<br/>
+	/// - if <see cref="Main.SettingsEnabled_TilesSwayInWind"/> is false<br/>
+	/// - if <see cref="TileID.Sets.SwaysInWindBasic"/> is false for the tile type of <paramref name="tileCache"/><br/>
+	/// - if the tile is an Orange Bloodroot
+	/// - if the tile is a Pink Prickly Pear on any vanilla cactus variant
+	/// </returns>
+	// TO-DO: add TileLoader hookset
-	private bool ShouldSwayInWind(int x, int y, Tile tileCache)
+	public bool ShouldSwayInWind(int x, int y, Tile tileCache)
 	{
 		if (!Main.SettingsEnabled_TilesSwayInWind)
 			return false;
@@ -5956,8 +_,11 @@
 					Main.spriteBatch.Draw(value6, position2, value7, color6, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 				}
 
+				// Extra patch context.
 				Main.spriteBatch.Draw(value6, vector, value7, new Color(255, 255, 255, 0) * 0.1f, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 			}
+
+			TileLoader.SpecialDraw(type, num, num2, Main.spriteBatch);
 		}
 	}
 
@@ -6209,6 +_,26 @@
 						num20 = 2;
 					}
 
+					// Handle mod palms.
+					if (Math.Abs(palmTreeBiome) >= ModPalmTree.VanillaStyleCount) {
+						y2 = 0;
+
+						// Oasis Tree
+						if (palmTreeBiome < 0) {
+							num17 = 114;
+							num18 = 98;
+							num19 = 48;
+							num20 = 2;
+						}
+
+						treeTextureIndex = (Math.Abs(palmTreeBiome) - ModPalmTree.VanillaStyleCount);
+						treeTextureIndex *= -2;
+
+						// Oasis tree
+						if (palmTreeBiome < 0)
+							treeTextureIndex -= 1;
+					}
+
 					int frameY2 = Main.tile[x, y].frameY;
 					byte tileColor4 = tile.color();
 					Texture2D treeTopTexture2 = GetTreeTopTexture(treeTextureIndex, palmTreeBiome, tileColor4);
@@ -6234,8 +_,13 @@
 	private Texture2D GetTreeTopTexture(int treeTextureIndex, int treeTextureStyle, byte tileColor)
 	{
 		Texture2D texture2D = _paintSystem.TryGetTreeTopAndRequestIfNotReady(treeTextureIndex, treeTextureStyle, tileColor);
-		if (texture2D == null)
+		if (texture2D == null) {
+			if (treeTextureIndex < 0 || treeTextureIndex >= ModTree.VanillaTopTextureCount)
+				treeTextureIndex = 0;
+
 			texture2D = TextureAssets.TreeTop[treeTextureIndex].Value;
+		}
+
 
 		return texture2D;
 	}
@@ -6243,8 +_,12 @@
 	private Texture2D GetTreeBranchTexture(int treeTextureIndex, int treeTextureStyle, byte tileColor)
 	{
 		Texture2D texture2D = _paintSystem.TryGetTreeBranchAndRequestIfNotReady(treeTextureIndex, treeTextureStyle, tileColor);
-		if (texture2D == null)
+		if (texture2D == null) {
+			if (treeTextureIndex < 0 || treeTextureIndex >= ModTree.VanillaTopTextureCount)
+				treeTextureIndex = 0;
+
 			texture2D = TextureAssets.TreeBranch[treeTextureIndex].Value;
+		}
 
 		return texture2D;
 	}
@@ -6392,9 +_,9 @@
 		}
 	}
 
-	private void DrawAnimatedTile_AdjustForVisionChangers(int i, int j, Tile tileCache, ushort typeCache, short tileFrameX, short tileFrameY, ref Color tileLight, bool canDoDust)
+	public void DrawAnimatedTile_AdjustForVisionChangers(int i, int j, Tile tileCache, ushort typeCache, short tileFrameX, short tileFrameY, ref Color tileLight, bool canDoDust)
 	{
-		if (_localPlayer.dangerSense && IsTileDangerous(_localPlayer, tileCache, typeCache)) {
+		if (_localPlayer.dangerSense && IsTileDangerous(i, j, _localPlayer, tileCache, typeCache)) {
 			if (tileLight.R < byte.MaxValue)
 				tileLight.R = byte.MaxValue;
 
@@ -6413,7 +_,7 @@
 			}
 		}
 
-		if (_localPlayer.findTreasure && Main.IsTileSpelunkable(typeCache, tileFrameX, tileFrameY)) {
+		if (_localPlayer.findTreasure && Main.IsTileSpelunkable(i, j, typeCache, tileFrameX, tileFrameY)) {
 			if (tileLight.R < 200)
 				tileLight.R = 200;
 
@@ -6432,7 +_,7 @@
 			return;
 
 		Color sightColor = Color.White;
-		if (Main.IsTileBiomeSightable(typeCache, tileFrameX, tileFrameY, ref sightColor)) {
+		if (Main.IsTileBiomeSightable(i, j, typeCache, tileFrameX, tileFrameY, ref sightColor)) {
 			if (tileLight.R < sightColor.R)
 				tileLight.R = sightColor.R;
 
@@ -6453,7 +_,17 @@
 		}
 	}
 
+	/// <summary>
+	/// Determines how much wind should affect a theoretical tile at the target location on the current update tick.
+	/// </summary>
+	/// <param name="i">The X coordinate of the theoretical target tile.</param>
+	/// <param name="j">The Y coordinate of the theoretical target tile.</param>
+	/// <param name="pushAnimationTimeTotal">The total amount of time, in ticks, that a wind push cycle for the theoretical target tile should last for.</param>
+	/// <param name="pushForcePerFrame">The amount which wind should affect the theoretical target tile per frame.</param>
+	/// <returns>
+	/// The degree to which wind should affect the theoretical target tile, represented as a float.
+	/// </returns>
-	private float GetWindGridPush(int i, int j, int pushAnimationTimeTotal, float pushForcePerFrame)
+	public float GetWindGridPush(int i, int j, int pushAnimationTimeTotal, float pushForcePerFrame)
 	{
 		_windGrid.GetWindTime(i, j, pushAnimationTimeTotal, out var windTimeLeft, out var directionX, out var _);
 		if (windTimeLeft >= pushAnimationTimeTotal / 2)
@@ -6475,7 +_,18 @@
 		}
 	}
 
+	/// <summary>
+	/// Determines how much wind should affect a theoretical tile at the target location on the current update tick.<br/>
+	/// More complex version of <see cref="GetWindGridPush"/>.
+	/// </summary>
+	/// <param name="i">The X coordinate of the theoretical target tile.</param>
+	/// <param name="j">The Y coordinate of the theoretical target tile.</param>
+	/// <param name="pushAnimationTimeTotal">The total amount of time, in ticks, that a wind push cycle for the theoretical target tile should last for.</param>
+	/// <param name="totalPushForce"></param>
+	/// <param name="loops"></param>
+	/// <param name="flipDirectionPerLoop"></param>
+	/// <returns></returns>
-	private float GetWindGridPushComplex(int i, int j, int pushAnimationTimeTotal, float totalPushForce, int loops, bool flipDirectionPerLoop)
+	public float GetWindGridPushComplex(int i, int j, int pushAnimationTimeTotal, float totalPushForce, int loops, bool flipDirectionPerLoop)
 	{
 		_windGrid.GetWindTime(i, j, pushAnimationTimeTotal, out var windTimeLeft, out var directionX, out var _);
 		float num = (float)windTimeLeft / (float)pushAnimationTimeTotal;
@@ -6662,6 +_,15 @@
 						num4 = ClimbCatTail(x, num3);
 						num3 -= num4 - 1;
 						break;
+					default:
+						// TML: num4 = sizeY (height of multi-tile)
+						if (TileID.Sets.MultiTileSway[tile.TileType]) {
+							TileObjectData objectData = TileObjectData.GetTileData(tile);
+							sizeX = objectData.Width;
+							num4 = objectData.Height;
+						}
+
+						break;
 				}
 
 				DrawMultiTileGrassInWind(unscaledPosition, zero, x, num3, sizeX, num4);
@@ -6738,6 +_,14 @@
 						sizeX = 2;
 						sizeY = 3;
 						break;
+					default:
+						if (TileID.Sets.MultiTileSway[tile.TileType]) {
+							TileObjectData tileObjectData = TileObjectData.GetTileData(tile);
+							sizeX = tileObjectData.Width;
+							sizeY = tileObjectData.Height;
+						}
+
+						break;
 				}
 
 				DrawMultiTileVinesInWind(unscaledPosition, zero, x, y, sizeX, sizeY);
@@ -6903,7 +_,7 @@
 			float num6 = (float)num2 * num3 * windCycle + num4;
 			if (_localPlayer.biomeSight) {
 				Color sightColor = Color.White;
-				if (Main.IsTileBiomeSightable(type, tileFrameX, tileFrameY, ref sightColor)) {
+				if (Main.IsTileBiomeSightable(x, i, type, tileFrameX, tileFrameY, ref sightColor)) {
 					if (color.R < sightColor.R)
 						color.R = sightColor.R;
 
@@ -7007,7 +_,11 @@
 		return num / (float)num2;
 	}
 
+	/// <summary>
+	/// Determines how much wind should affect a multitile of the given size and top left target location on the current update tick.
+	/// <para/> Similar to <see cref="GetWindGridPushComplex"/>, but for a multitile area instead of a single tile.
+	/// </summary>
-	private float GetHighestWindGridPushComplex(int topLeftX, int topLeftY, int sizeX, int sizeY, int totalPushTime, float pushForcePerFrame, int loops, bool swapLoopDir)
+	public float GetHighestWindGridPushComplex(int topLeftX, int topLeftY, int sizeX, int sizeY, int totalPushTime, float pushForcePerFrame, int loops, bool swapLoopDir)
 	{
 		float result = 0f;
 		int num = int.MaxValue;
@@ -7041,7 +_,19 @@
 		Vector2 vector2 = new Vector2(0f, -2f);
 		vector += vector2;
 		bool flag = false;
+		bool isBelowNonHammeredPlatform = true;
+		for (int i = 0; i < sizeX; i++) {
+			if (WorldGen.IsBelowANonHammeredPlatform(topLeftX + i, topLeftY)) {
+				continue;
+			}
+
+			isBelowNonHammeredPlatform = false;
+			break;
+		}
+		/*
 		if ((type != 465 && (uint)(type - 591) > 1u) ? (sizeX == 1 && WorldGen.IsBelowANonHammeredPlatform(topLeftX, topLeftY)) : (WorldGen.IsBelowANonHammeredPlatform(topLeftX, topLeftY) && WorldGen.IsBelowANonHammeredPlatform(topLeftX + 1, topLeftY))) {
+		*/
+		if (isBelowNonHammeredPlatform) {
 			vector.Y -= 8f;
 			vector2.Y -= 8f;
 		}
@@ -7209,6 +_,7 @@
 				color = new Color(255, 255, 255, 0);
 				break;
 		}
+		TileLoader.GetTile(type)?.AdjustMultiTileVineParameters(topLeftX, topLeftY, ref num3, ref num4, ref num5, ref flag2, ref num2, ref texture2D, ref color);
 
 		if (flag2)
 			vector += new Vector2(0f, 16f);
