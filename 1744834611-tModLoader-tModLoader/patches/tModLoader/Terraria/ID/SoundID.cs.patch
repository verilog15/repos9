--- src/TerrariaNetCore/Terraria/ID/SoundID.cs
+++ src/tModLoader/Terraria/ID/SoundID.cs
@@ -1,13 +_,16 @@
+using System;
 using System.Collections.Generic;
 using System.Linq;
 using System.Reflection;
 using Terraria.Audio;
+using LegacySoundStyle = Terraria.Audio.SoundStyle;
+using static Terraria.ID.SoundID.SoundStyleDefaults;
 
 namespace Terraria.ID;
 
-public class SoundID
+public partial class SoundID
 {
-	private struct SoundStyleDefaults
+	internal partial struct SoundStyleDefaults
 	{
 		public readonly float PitchVariance;
 		public readonly float Volume;
@@ -19,9 +_,29 @@
 			Volume = volume;
 			Type = type;
 		}
+
+		// Added by TML:
+		public void Apply(ref SoundStyle style)
+		{
+			style.PitchVariance = PitchVariance;
+			style.Volume = Volume;
+			style.Type = Type;
+		}
 	}
 
+	/*
 	private static readonly SoundStyleDefaults ItemDefaults = new SoundStyleDefaults(1f, 0.06f);
+	*/
+}
+
+// The following is a split of the integer IDs into a separate internal class,
+// with most of them recreated in SoundID.TML.cs as LegacySoundStyle values,
+// so that it's possible to leave only one PlaySound method in the public API,
+// and also to make it easier to modify/copy sound styles when, for example, adjusting playback volume.
+
+internal class LegacySoundIDs
+{
+	// Vanilla code:
 	public const int Dig = 0;
 	public const int PlayerHit = 1;
 	public const int Item = 2;
@@ -92,6 +_,14 @@
 	public const int Cockatiel = 67;
 	public const int Macaw = 68;
 	public const int Toucan = 69;
+	// Added by TML:
+	public static int Count = 70;
+}
+
+public partial class SoundID
+{
+	//TML: Redefined in SoundID.TML.cs
+	/*
 	public static readonly LegacySoundStyle NPCHit1 = new LegacySoundStyle(3, 1);
 	public static readonly LegacySoundStyle NPCHit2 = new LegacySoundStyle(3, 2);
 	public static readonly LegacySoundStyle NPCHit3 = new LegacySoundStyle(3, 3);
@@ -149,6 +_,9 @@
 	public static readonly LegacySoundStyle NPCHit55 = new LegacySoundStyle(3, 55);
 	public static readonly LegacySoundStyle NPCHit56 = new LegacySoundStyle(3, 56);
 	public static readonly LegacySoundStyle NPCHit57 = new LegacySoundStyle(3, 57);
+	*/
+	public static readonly int NPCHitCount = 58; // Added by TML, keep this and SoundID.TML.cs up to date.
+	/*
 	public static readonly LegacySoundStyle NPCDeath1 = new LegacySoundStyle(4, 1);
 	public static readonly LegacySoundStyle NPCDeath2 = new LegacySoundStyle(4, 2);
 	public static readonly LegacySoundStyle NPCDeath3 = new LegacySoundStyle(4, 3);
@@ -215,7 +_,9 @@
 	public static readonly LegacySoundStyle NPCDeath64 = new LegacySoundStyle(4, 64);
 	public static readonly LegacySoundStyle NPCDeath65 = new LegacySoundStyle(4, 65);
 	public static readonly LegacySoundStyle NPCDeath66 = new LegacySoundStyle(4, 66);
-	public static short NPCDeathCount = 67;
+	*/
+	public static readonly int NPCDeathCount = 67; // TML: Changed from short to int and made readonly, keep this and SoundID.TML.cs up to date.
+	/*
 	public static readonly LegacySoundStyle Item1 = new LegacySoundStyle(2, 1);
 	public static readonly LegacySoundStyle Item2 = new LegacySoundStyle(2, 2);
 	public static readonly LegacySoundStyle Item3 = new LegacySoundStyle(2, 3);
@@ -394,8 +_,12 @@
 	public static readonly LegacySoundStyle Item176 = new LegacySoundStyle(2, 176);
 	public static readonly LegacySoundStyle Item177 = new LegacySoundStyle(2, 177);
 	public static readonly LegacySoundStyle Item178 = new LegacySoundStyle(2, 178);
-	public static short ItemSoundCount = 179;
+	*/
+	public static readonly int ItemSoundCount = 179; // TML: Changed from short to int and made readonly, keep this and SoundID.TML.cs up to date.
+	/*
 	public static readonly LegacySoundStyle DD2_GoblinBomb = new LegacySoundStyle(2, 14).WithVolume(0.5f);
+	*/
+	public static readonly SoundStyle DD2_GoblinBomb = new SoundStyle($"{Prefix}NPC_Killed_14") { Volume = 0.5f };
 	public static readonly LegacySoundStyle AchievementComplete = CreateTrackable("achievement_complete");
 	public static readonly LegacySoundStyle BlizzardInsideBuildingLoop = CreateTrackable("blizzard_inside_building_loop", SoundType.Ambient);
 	public static readonly LegacySoundStyle BlizzardStrongLoop = CreateTrackable("blizzard_strong_loop", SoundType.Ambient).WithVolume(0.5f);
@@ -509,9 +_,10 @@
 	public static Dictionary<string, ushort> IndexByName = null;
 	public static Dictionary<ushort, LegacySoundStyle> SoundByIndex = null;
 
-	public static int TrackableLegacySoundCount => _trackableLegacySoundPathList.Count;
+	internal static int TrackableLegacySoundCount => _trackableLegacySoundPathList.Count;
 
-	public static string GetTrackableLegacySoundPath(int id) => _trackableLegacySoundPathList[id];
+	internal static string GetTrackableLegacySoundPath(int id) => _trackableLegacySoundPathList[id];
+
 	private static LegacySoundStyle CreateTrackable(string name, SoundStyleDefaults defaults) => CreateTrackable(name, 1, defaults.Type).WithPitchVariance(defaults.PitchVariance).WithVolume(defaults.Volume);
 	private static LegacySoundStyle CreateTrackable(string name, int variations, SoundStyleDefaults defaults) => CreateTrackable(name, variations, defaults.Type).WithPitchVariance(defaults.PitchVariance).WithVolume(defaults.Volume);
 	private static LegacySoundStyle CreateTrackable(string name, SoundType type = SoundType.Sound) => CreateTrackable(name, 1, type);
@@ -531,7 +_,10 @@
 			}
 		}
 
+		/*
 		return new LegacySoundStyle(42, count, variations, type);
+		*/
+		return new LegacySoundStyle($"{PrefixCustom}{name}{(variations > 1 ? "_" : null)}", 0, variations, type);
 	}
 
 	public static void FillAccessMap()
