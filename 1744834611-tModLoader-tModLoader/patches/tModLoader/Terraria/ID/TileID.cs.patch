--- src/TerrariaNetCore/Terraria/ID/TileID.cs
+++ src/tModLoader/Terraria/ID/TileID.cs
@@ -1,11 +_,12 @@
 using System.Collections.Generic;
 using ReLogic.Reflection;
+using Terraria.ModLoader;
 
 namespace Terraria.ID;
 
-public class TileID
+public partial class TileID
 {
-	public static class Sets
+	public static partial class Sets
 	{
 		public static class Conversion
 		{
@@ -106,19 +_,79 @@
 			};
 		}
 
-		public static SetFactory Factory = new SetFactory(Count);
+		public static SetFactory Factory = new SetFactory(TileLoader.TileCount, nameof(TileID), Search);
+
+		/// <summary>
+		/// If <see langword="true"/> for a given tile type (<see cref="Tile.TileType"/>), then players will slip on that tile.
+		/// <br/> If players have Ice Skates (<see cref="Player.iceSkate"/>) equipped, however, they will be much faster on this tile.
+		/// <br/> Defaults to <see langword="false"/>.
+		/// </summary>
 		public static bool[] IceSkateSlippery = Factory.CreateBoolSet(161, 162, 127, 163, 164, 200, 659);
+		/// <summary>
+		/// Set to true to prevent this tile from drawing with more detailed lighting, if the user is using a detailed lighting mode. If true, a single lighting value will be used to draw this tile instead of drawing the tile in 9 sections with different interpolated lighting values. <see cref="Traps"/> and <see cref="Boulder"/> are examples of tiles that use this. This is only relevant for tiles set as <see cref="Main.tileSolid"/>.
+		/// </summary>
 		public static bool[] DontDrawTileSliced = Factory.CreateBoolSet(false, 137, 235, 388, 476, 160, 138, 664, 665, 630, 631);
+
+		// TML: Why would someone want to set this? Maybe it's for 1x1 tile entities?
+		/// <summary>
+		/// If <see langword="true"/> for a given tile type (<see cref="Tile.TileType"/>), then that tile can be compressed when syncing or saving the world.
+		/// <br/> Defaults to <see langword="true"/>.
+		/// </summary>
 		public static bool[] AllowsSaveCompressionBatching = Factory.CreateBoolSet(true, 520, 423);
+
+		/// <summary>
+		/// If <see langword="true"/> for a given tile type (<see cref="Tile.TileType"/>), then that tile is categorized as a Gem Tree.
+		/// <br/> Vanilla only uses this for displaying a special message when using Lucy the Axe.
+		/// <br/> Defaults to <see langword="false"/>.
+		/// </summary>
 		public static bool[] CountsAsGemTree = Factory.CreateBoolSet(false, 583, 584, 585, 586, 587, 588, 589);
+
+		/// <summary>
+		/// If <see langword="true"/> for a given tile type (<see cref="Tile.TileType"/>), then that tile is categorized as a tree trunk.
+		/// <br/> Tree trunks are a type of tile anchor (<see cref="Enums.AnchorType.Tree"/>), targettable by axes, and are replanted when using the <see cref="ItemID.AcornAxe"/>.
+		/// <br/> Defaults to <see langword="false"/>.
+		/// </summary>
 		public static bool[] IsATreeTrunk = Factory.CreateBoolSet(false, 5, 72, 583, 584, 585, 586, 587, 588, 589, 596, 616, 634);
+
+		/// <summary>
+		/// If <see langword="true"/> for a given tile type (<see cref="Tile.TileType"/>), then that tile can be shaken on hit.
+		/// <br/> <strong>This set only applies to trees.</strong>.
+		/// <br/> Defaults to <see langword="false"/>.
+		/// </summary>
 		public static bool[] IsShakeable = Factory.CreateBoolSet(false, 5, 72, 323, 583, 584, 585, 586, 587, 588, 589, 596, 616, 634);
+
+		/// <summary>
+		/// If true, tiles of this type in a slightly larger range than the normal destruction will be destroyed by a meteor. Contains tree tiles, CorruptThorns, and CrimsonThorns, suggesting that the heat from the meteor's impact burned up those tiles.
+		/// </summary>
 		public static bool[] GetsDestroyedForMeteors = Factory.CreateBoolSet(false, 5, 32, 352, 583, 584, 585, 586, 587, 588, 589, 596, 616, 634);
 		public static bool[] GetsCheckedForLeaves = Factory.CreateBoolSet(false, 5, 323, 72, 583, 584, 585, 586, 587, 588, 589, 596, 616, 634);
+		/// <summary>
+		/// Prevents a tile immediately below a tile of this type from being mineable.
+		/// <br/> Use <see cref="ModTile.CanKillTile(int, int, ref bool)"/> or <see cref="GlobalTile.CanKillTile(int, int, int, ref bool)"/> to dynamically prevent tile removal for situations with more complex logic. Note that block swap will still work.
+		/// <br/> To affect tile replace behavior in a similar manner, see <see cref="PreventsTileReplaceIfOnTopOfIt"/>
+		/// <br/> Used mostly by demon altar, trees, and item display tiles (Mannequin, Hat Rack).
+		/// <para/> See also <see cref="PreventsTileHammeringIfOnTopOfIt"/>, which is frequently set in tandem with this.
+		/// </summary>
 		public static bool[] PreventsTileRemovalIfOnTopOfIt = Factory.CreateBoolSet(false, 5, 323, 72, 488, 26, 583, 584, 585, 586, 587, 588, 589, 596, 616, 470, 475, 634);
+		/// <summary>
+		/// Prevents a tile immediately below a tile of this type from being replaceable via the block swap feature.
+		/// <br/> Use <see cref="ModTile.CanReplace(int, int, int)"/> or <see cref="GlobalTile.CanReplace(int, int, int, int)"/> to dynamically prevent tile replacement for situations with more complex logic.
+		/// <br/> To affect tile mining behavior in a similar manner, see <see cref="PreventsTileRemovalIfOnTopOfIt"/>
+		/// <br/> Used mostly by trees tiles.
+		/// </summary>
 		public static bool[] PreventsTileReplaceIfOnTopOfIt = Factory.CreateBoolSet(false, 5, 323, 72, 583, 584, 585, 586, 587, 588, 589, 596, 616, 634);
 		public static bool[] CommonSapling = Factory.CreateBoolSet(false, 20, 590, 595, 615);
+
+		/// <summary>
+		/// If <see langword="true"/> for a given tile type (<see cref="Tile.TileType"/>), then that tile has smooth borders and is drawn differently when hammered to be a half-block.
+		/// <br/> Defaults to <see langword="false"/>.
+		/// </summary>
 		public static bool[] AllBlocksWithSmoothBordersToResolveHalfBlockIssue = Factory.CreateBoolSet(false, 321, 157, 208, 159, 190, 80, 251, 202, 229, 56, 38, 39, 152, 118, 151, 148, 206, 119, 175, 46, 176, 45, 140, 347, 370, 121, 122, 680, 681, 682, 685, 686, 346, 687, 688, 689, 690, 691, 692, 160, 226, 54, 156, 155, 153, 154, 150, 250, 198, 273, 274, 325, 284, 348, 385, 327, 326, 345, 328, 329, 357, 369, 268, 261, 262, 255, 267, 260, 265, 258, 266, 259, 264, 257, 263, 256, 311, 431, 426, 433, 430, 434, 432, 272, 145, 146, 350, 127, 472, 473, 477, 478, 479, 492, 496, 507, 508, 563, 618);
+
+		/// <summary>
+		/// If <see langword="true"/> for a given tile type (<see cref="Tile.TileType"/>), then that tile can be mined using a <see href="https://terraria.wiki.gg/wiki/Gravedigger%27s_Shovel">shovel</see>.
+		/// <br/> Defaults to <see langword="false"/>.
+		/// </summary>
 		public static bool[] CanBeDugByShovel = Factory.CreateBoolSet(false, 0, 668, 59, 57, 123, 224, 147, 2, 109, 23, 661, 199, 662, 60, 70, 477, 492, 53, 116, 112, 234, 40, 495, 633);
 		public static bool[] NonSolidSaveSlopes = Factory.CreateBoolSet(false, 131, 351);
 		public static bool[] ResetsHalfBrickPlacementAttempt = Factory.CreateBoolSet(true, 2, 23, 661, 60, 70, 199, 662, 109, 477, 492, 179, 512, 180, 513, 181, 514, 182, 515, 183, 516, 381, 517, 534, 535, 536, 537, 539, 540, 625, 626, 627, 628, 633);
@@ -129,6 +_,10 @@
 		public static bool[] MergesWithClouds = Factory.CreateBoolSet(196, 460);
 		public static bool[] Boulders = Factory.CreateBoolSet(138, 484, 664, 665);
 		public static bool[] Clouds = Factory.CreateBoolSet(189, 196, 460);
+		/// <summary>
+		/// Draws the lid of a critter cage (<see cref="GameContent.TextureAssets.CageTop"/>). If following a vanilla cage tile sprite as a template, this should be set to a correct value to allow the cage to draw correctly when stacked. <br/> 0: 6x3 Grey <br/> 1: 6x3 Gold <br/> 2: 6x3 Blue (Gem Critters) <br/> 3: 3x2 Grey <br/> 4: 3x2 Gold.
+		/// <para/> Defaults to -1.
+		/// </summary>
 		public static int[] CritterCageLidStyle = Factory.CreateIntSet(-1, 275, 0, 276, 0, 277, 0, 278, 0, 279, 0, 280, 0, 281, 0, 558, 0, 554, 0, 553, 0, 551, 0, 550, 0, 542, 0, 413, 0, 309, 0, 297, 0, 296, 0, 645, 0, 643, 0, 644, 0, 632, 0, 640, 0, 559, 1, 414, 1, 359, 1, 358, 1, 605, 2, 604, 2, 603, 2, 602, 2, 601, 2, 599, 2, 600, 2, 612, 2, 611, 2, 610, 2, 609, 2, 608, 2, 606, 2, 607, 2, 285, 3, 286, 3, 582, 3, 555, 3, 538, 3, 533, 3, 532, 3, 394, 3, 393, 3, 392, 3, 391, 3, 339, 3, 310, 3, 299, 3, 298, 3, 629, 3, 619, 3, 556, 4, 544, 4, 364, 4, 363, 4, 362, 4, 361, 4);
 		public static int[] SmartCursorPickaxePriorityOverride = Factory.CreateIntSet(0, 12, 1, 665, 1, 639, 1);
 		public static bool[] IgnoreSmartCursorPriorityAxe = Factory.CreateBoolSet(false, 488);
@@ -136,6 +_,10 @@
 		public static bool[] CanBeSatOnForPlayers = Factory.CreateBoolSet(false, 15, 497, 89, 102, 487);
 		public static bool[] CanBeSleptIn = Factory.CreateBoolSet(false, 79);
 		public static bool[] IgnoresTileReplacementDropCheckWhenBeingPlaced = Factory.CreateBoolSet(false, 158, 30);
+		/// <summary>
+		/// If true, this tile will be drawn during the solid tile drawing pass despite not being <see cref="Main.tileSolid"/>, meaning it will draw in front of <see cref="NPC.behindTiles"/> NPC such as worms rather than behind as "background" tiles usually do. Some examples include <see cref="OpenDoor"/>, <see cref="DisplayDoll"/>, and <see cref="HatRack"/>.
+		/// <para/> Setting to false would do the inverse, but no vanilla tile uses that. Defaults to null.
+		/// </summary>
 		public static bool?[] DrawTileInSolidLayer = Factory.CreateCustomSet<bool?>(null, new object[10] {
 			(ushort)11,
 			true,
@@ -148,7 +_,15 @@
 			(ushort)579,
 			true
 		});
+		/// <summary>
+		/// Indicates that this tile can't replace another tile via the block swap feature.
+		/// <br/> Use <see cref="ModTile.CanReplace(int, int, int)"/> or <see cref="GlobalTile.CanReplace(int, int, int, int)"/> to dynamically prevent tile replacement for situations with more complex logic.
+		/// </summary>
 		public static bool[] DoesntPlaceWithTileReplacement = Factory.CreateBoolSet(2, 60, 70, 109, 199, 23, 661, 662, 633);
+		/// <summary>
+		/// Indicates that this tile can't be replaced with another tile via the block swap feature.
+		/// <br/> Use <see cref="ModTile.CanReplace(int, int, int)"/> or <see cref="GlobalTile.CanReplace(int, int, int, int)"/> to dynamically prevent tile replacement for situations with more complex logic.
+		/// </summary>
 		public static bool[] DoesntGetReplacedWithTileReplacement = Factory.CreateBoolSet(58, 225, 171, 127, 481, 482, 483, 423);
 		public static bool[] IsVine = Factory.CreateBoolSet(52, 382, 62, 115, 205, 528, 636, 638);
 		public static bool[] IsBeam = Factory.CreateBoolSet(124, 561, 574, 575, 576, 577, 578);
@@ -156,17 +_,50 @@
 		public static bool[] ReplaceTileBreakUp = Factory.CreateBoolSet(27, 20, 227, 24, 201, 110, 113, 61, 74, 71, 3, 73, 186, 187, 185, 233, 530, 236, 238, 254, 484, 485, 84, 82, 83, 529, 549, 590, 595, 615, 624, 637);
 		public static bool[] ReplaceTileBreakDown = Factory.CreateBoolSet(205, 115, 62, 52, 382, 444, 528, 638, 636);
 		public static bool[] SlowlyDiesInWater = Factory.CreateBoolSet(3, 20, 24, 27, 73, 201, 80, 110, 529, 530, 590, 595, 615, 637);
+		/// <summary>
+		/// If true, the wall behind this tile will be drawn despite game logic expecting the wall to be fully hidden by the tile. Use this for <see cref="Main.tileSolid"/> tiles that don't fully cover all the pixels of their tile location or are transparent. Some examples include <see cref="ClosedDoor"/>, <see cref="Glass"/>, and <see cref="Boulder"/>. If walls seem to disappear when placed behind your tile, set this to true.
+		/// </summary>
 		public static bool[] DrawsWalls = Factory.CreateBoolSet(10, 54, 138, 664, 484, 388, 191, 137, 328, 162, 387, 48, 232, 127, 459, 541, 546);
 		public static ushort[] GemsparkFramingTypes = Factory.CreateUshortSet(0, 265, 265, 258, 258, 264, 264, 257, 257, 267, 267, 260, 260, 266, 266, 259, 259, 263, 263, 256, 256, 262, 262, 255, 255, 268, 268, 261, 261, 385, 385, 446, 446, 447, 447, 448, 448);
 		public static bool[] TeamTiles = Factory.CreateBoolSet(426, 430, 431, 432, 433, 434, 427, 435, 436, 437, 438, 439);
+
+		/// <summary>
+		/// If <c>!= 0</c> for a given tile type (<see cref="Tile.TileType"/>), then that tile functions as a conveyor belt.
+		/// <br/> A positive value pushes entities to the right, and a negative value to the left. The actual value does not matter, only the sign.
+		/// <br/> Defaults to <c>0</c>.
+		/// </summary>
 		public static int[] ConveyorDirection = Factory.CreateIntSet(0, 421, 1, 422, -1);
+		/// <summary>
+		/// Sets the tile to draw vines affected by wind physics and player interaction. This is required for adding wind to any type of vine to properly draw the vines when blowing in the wind.
+		/// <para/> <b>NOTE:</b> Requires calling <see cref="GameContent.Drawing.TileDrawing.CrawlToTopOfVineAndAddSpecialPoint(int, int)"/> in <c>ModTile.PreDraw</c> to register the coordinates of the root of the vine for special drawing. 
+		/// </summary>
 		public static bool[] VineThreads = Factory.CreateBoolSet(382, 62, 115, 205, 52, 528, 636, 638);
+		/// <summary>
+		/// Sets the tile to to draw reverse vines, vines that go up instead of hanging down, affected by wind physics and player interaction. This is required for adding wind to any type of reverse vine to properly draw the reverse vines when blowing in the wind.
+		/// <para/> This is only used for <see cref="TileID.Seaweed"/> (549).
+		/// <para/> <b>NOTE:</b> Requires calling <see cref="GameContent.Drawing.TileDrawing.CrawlToBottomOfReverseVineAndAddSpecialPoint(int, int)"/> in <c>ModTile.PreDraw</c> to register the coordinates of the root of the vine for special drawing. 
+		/// </summary>
 		public static bool[] ReverseVineThreads = Factory.CreateBoolSet(549);
 		public static bool[] HasSlopeFrames = Factory.CreateBoolSet(421, 422);
+		/// <summary>
+		/// Changes the gamepad button prompt when hovering over this tile from "Use" to "Read". Set by all <see cref="Main.tileSign"/> tiles. Defaults to false.
+		/// </summary>
 		public static bool[] TileInteractRead = Factory.CreateBoolSet(55, 85, 425, 573);
+		/// <summary>
+		/// Set to true to prevent this tile from being drawn slightly warped to fit with nearby half bricks. Tiles such as <see cref="Traps"/> and <see cref="PlanterBox"/> use this. This is only relevant for tiles set as <see cref="Main.tileSolid"/> and not <see cref="Sets.NotReallySolid"/>. 
+		/// </summary>
 		public static bool[] IgnoresNearbyHalfbricksWhenDrawn = Factory.CreateBoolSet(380, 476, 235, 138, 664, 137, 484, 421, 422);
+		/// <summary>
+		/// If true, this tile will render as if it were affected by wind and player interaction and is anchored below. Some examples include <see cref="TileID.Saplings"/>, <see cref="TileID.Plants"/>, and <see cref="TileID.BloomingHerbs"/>. 
+		/// <para/> This only applies to 1x1 tiles and should not be applied to multitiles, although some 1x2 tiles do happen to use it. Use <see cref="MultiTileSway"/> instead for multitiles.
+		/// </summary>
 		public static bool[] SwaysInWindBasic = Factory.CreateBoolSet(3, 20, 24, 61, 71, 73, 74, 83, 84, 110, 113, 201, 227, 529, 590, 595, 615, 624, 656, 637);
+		/// <summary> <strong>Unused.</strong> </summary>
 		public static int[] DrawFlipMode = Factory.CreateIntSet(0, 3, 1, 13, 1, 20, 1, 24, 1, 49, 1, 372, 1, 646, 1, 50, 1, 52, 1, 61, 1, 62, 1, 71, 1, 73, 1, 74, 1, 81, 1, 82, 1, 83, 1, 84, 1, 91, 1, 92, 1, 93, 1, 110, 1, 113, 1, 115, 1, 135, 1, 141, 1, 165, 1, 174, 1, 201, 1, 205, 1, 227, 1, 270, 1, 271, 1, 382, 1, 184, 2, 185, 3, 528, 1, 529, 1, 590, 1, 595, 1, 615, 1, 624, 1, 638, 1, 636, 1, 656, 1);
+		/// <summary>
+		/// Indicates that this tile has an outline texture to be drawn to indicate that it is interactable. If set to true for a modded tile, <see cref="ModTile.HighlightTexture"/> will be used to autoload the highlight texture and must exist for the mod to load.
+		/// <para/> Defaults to <see langword="false"/>.
+		/// </summary>
 		public static bool[] HasOutlines = Factory.CreateBoolSet(10, 11, 15, 21, 29, 55, 79, 85, 88, 89, 97, 102, 104, 125, 132, 136, 139, 144, 207, 209, 212, 215, 216, 237, 287, 335, 338, 354, 356, 377, 386, 387, 388, 389, 410, 411, 425, 441, 455, 463, 467, 468, 470, 475, 487, 480, 494, 497, 509, 510, 511, 621, 464, 657, 658, 663);
 		public static bool[] AllTiles = Factory.CreateBoolSet(true);
 		public static bool[] Dirt = Factory.CreateBoolSet(0, 668);
@@ -181,10 +_,30 @@
 		public static bool[] HellSpecial = Factory.CreateBoolSet(58, 76, 75);
 		public static bool[] Leaves = Factory.CreateBoolSet(384, 192);
 		public static bool[] tileMossBrick = Factory.CreateBoolSet(false, 512, 513, 514, 515, 516, 517, 535, 537, 540, 626, 628);
+		/// <summary>
+		/// Indicates if a tile is eligible to be replaced during world generation. Tiles indicated to not be valid for general placement will prevent the placement of various micro biomes such as hives, campsites, enchanted sword shrines, and minecart tracks.
+		/// <para/> Vanilla tiles set to false in this set include Chests, Life Crystals, various Dungeon Bricks, Lihzahrd Bricks, Ebonsand, Ebonstone, Crimstone, Shadow Orbs, Hive, Mushroom Grass, Sandstone Brick, and others. The effect of these tiles being in this set means that micro biomes will not overlap with the dungeon, pyramid, temple, corruption/crimson biomes, glowing mushroom biomes, and other important placed tiles such as chests and life crystals.
+		/// <para/> Modders should set this to false for any tile that could potentially be placed during world generation where this effect is desired. In conjunction with <see cref="WorldBuilding.StructureMap.AddProtectedStructure(Microsoft.Xna.Framework.Rectangle, int)"/>, this will help ensure that interesting world generation features do not overlap. This is especially useful for terrain tiles that would be placed into the world that wouldn't be well served by adding rectangular areas to protect using <c>AddProtectedStructure</c>.
+		/// <para/> This effect is cooperative and is reliant on world generation code that checks this set, such as how <see cref="WorldBuilding.StructureMap.CanPlace(Microsoft.Xna.Framework.Rectangle, int)"/> will check this set and the protected structures by default.
+		/// <para/> The <see href="https://github.com/tModLoader/tModLoader/wiki/World-Generation">World Generation wiki page</see> teaches more about this subject.
+		/// <para/> Defaults to <c>true</c>.
+		/// </summary>
 		public static bool[] GeneralPlacementTiles = Factory.CreateBoolSet(true, 225, 41, 481, 43, 482, 44, 483, 226, 203, 112, 25, 70, 151, 21, 31, 467, 12, 665, 639);
+		/// <summary>
+		/// Indicates that this tile is a basic 2x2 chest. It is important to note that chests must be 2x2 tiles with the typical 2 padding. Deviations from the default layout are not supported and will lead to issues, so following a working template is recommended.
+		/// <para/> <see cref="Main.tileContainer"/> and <see cref="IsAContainer"/> should also be set in tandem.
+		/// </summary>
 		public static bool[] BasicChest = Factory.CreateBoolSet(21, 467);
 		public static bool[] BasicChestFake = Factory.CreateBoolSet(441, 468);
+		/// <summary>
+		/// Indicates that this tile is a basic 3x2 dresser. It is important to note that dressers must be 3x2 tiles with the typical 2 padding. Deviations from the default layout are not supported and will lead to issues, so following a working template is recommended.
+		/// <para/> <see cref="Main.tileContainer"/> and <see cref="IsAContainer"/> should also be set in tandem.
+		/// </summary>
 		public static bool[] BasicDresser = Factory.CreateBoolSet(88);
+		/// <summary>
+		/// Protects specific tiles from some world generation methods, most notably <see cref="WorldGen.Cavinator(int, int, int)"/> and <see cref="WorldGen.TileRunner(int, int, double, int, int, bool, double, double, bool, bool, int)"/>. Tiles set to false will be immune to being changed by some world generation methods that happen early on in the world generation process while the terrain is being shaped. Some examples include various sandstone and hardened sand tiles, granite, and LihzahrdBrick. Should only need to be set for terrain tiles potentially placed early in world generation that shouldn't be interrupted by ore generation or caves.
+		/// <para/> Defaults to true.
+		/// </summary>
 		public static bool[] CanBeClearedDuringGeneration = Factory.CreateBoolSet(true, 396, 400, 401, 397, 398, 399, 404, 368, 367, 226, 237);
 		public static List<int> CorruptCountCollection = new List<int> {
 			23,
@@ -231,29 +_,77 @@
 		public static bool[] IsSkippedForNPCSpawningGroundTypeCheck = Factory.CreateBoolSet(false, 421, 422);
 		public static bool[] BlocksStairs = Factory.CreateBoolSet(386, 387, 54, 541);
 		public static bool[] BlocksStairsAbove = Factory.CreateBoolSet(386, 387);
+		/// <summary>
+		/// Indicates that this tile should not be considered solid for the purpose of tile placement anchors despite being <see cref="Main.tileSolid"/>. Used by <see cref="ClosedDoor"/>, <see cref="TrapdoorClosed"/>, and <see cref="TallGateClosed"/>. These tiles are solid and have collision, but because they transform into a non-solid tile when interacted with, they are not suitable for placing tiles on.
+		/// </summary>
 		public static bool[] NotReallySolid = Factory.CreateBoolSet(387, 388, 10);
 		public static bool[] BlocksWaterDrawingBehindSelf = Factory.CreateBoolSet(false, 54, 541, 328, 470);
 		public static bool[] AllowLightInWater = Factory.CreateBoolSet(false, 54, 541, 328);
 		public static bool[] NeedsGrassFraming = Factory.CreateBoolSet(633);
 		public static int[] NeedsGrassFramingDirt = Factory.CreateIntSet(0, 633, 57);
 		public static bool[] ChecksForMerge = Factory.CreateBoolSet(0, 668, 2, 661, 60, 70, 199, 662, 109, 477, 492, 633, 57, 58, 75, 76, 684, 147, 161, 164, 163, 200, 162, 189, 196, 460, 224, 191, 383, 211, 225, 59, 226, 396, 397, 398, 399, 402, 400, 401, 403, 404, 234, 112, 407);
+		/// <summary>
+		/// Causes tile framing to run for this tile when a nearby wall is killed. Most tiles are not affected by walls, but some tiles can anchor to walls in some or all of its placement styles. Any tile that anchors to walls should set this to true, allowing the tile to properly destroy itself if the anchored walls are destroyed. Some tiles that set this include <see cref="TileID.Painting3X3"/>, <see cref="TileID.Signs"/>, and <see cref="TileID.Torches"/>.
+		/// <para/> Defaults to false.
+		/// </summary>
 		public static bool[] FramesOnKillWall = Factory.CreateBoolSet(440, 240, 241, 242, 245, 246, 4, 136, 334, 132, 55, 395, 425, 440, 471, 510, 511, 573, 630, 631);
+		/// <summary>
+		/// If true, Town NPCs will try to avoid standing still in front of the tile, allowing the player to interact with the tile rather than accidentally interacting with the Town NPC. Some tiles that set this include <see cref="TileID.Containers"/>, <see cref="TileID.Signs"/>, and <see cref="TileID.Tombstones"/>.
+		/// </summary>
 		public static bool[] AvoidedByNPCs = Factory.CreateBoolSet(21, 467, 55, 85, 395, 88, 463, 334, 29, 97, 99, 356, 663, 425, 440, 209, 441, 468, 471, 491, 510, 511, 520, 573);
+		/// <summary>
+		/// If true, Town NPCs might occasionally palm their hand at this tile, suggesting that they are using the tile. Crafting stations typically set this. Some tiles that set this include <see cref="TileID.Furnaces"/>, <see cref="TileID.Sawmill"/>, and <see cref="TileID.AlchemyTable"/>.
+		/// </summary>
 		public static bool[] InteractibleByNPCs = Factory.CreateBoolSet(17, 77, 133, 12, 665, 639, 26, 35, 36, 55, 395, 471, 21, 467, 29, 97, 88, 99, 463, 491, 33, 372, 174, 49, 646, 100, 173, 78, 79, 94, 96, 101, 50, 103, 282, 106, 114, 125, 171, 172, 207, 215, 220, 219, 244, 228, 237, 247, 128, 269, 354, 355, 377, 287, 378, 390, 302, 405, 406, 411, 425, 209, 441, 468, 452, 454, 455, 457, 462, 470, 475, 494, 499, 505, 511, 510, 520, 543, 565, 573, 597, 598, 617, 621, 464, 642);
 		public static bool[] HousingWalls = Factory.CreateBoolSet(11, 389, 386);
 		public static bool[] BreakableWhenPlacing = Factory.CreateBoolSet(324, 186, 187, 185, 165, 530, 233, 227, 485, 81, 624);
 		public static bool[] TouchDamageDestroyTile = Factory.CreateBoolSet(32, 69, 352, 655);
+		/// <summary>
+		/// If true, the tile will apply the <see cref="BuffID.Suffocation"/> buff if the player is overlapping the tiles. Used by sand tiles.
+		/// </summary>
 		public static bool[] Suffocate = Factory.CreateBoolSet(53, 112, 116, 123, 224, 234);
+		/// <summary>
+		/// Applies the <see cref="BuffID.Burning"/> buff to any player touching the tile without <see cref="Player.fireWalk"/>. Used by <see cref="TileID.Meteorite"/>, <see cref="TileID.Hellstone"/>, <see cref="TileID.HellstoneBrick"/>, <see cref="TileID.CrispyHoneyBlock"/>, and <see cref="TileID.AncientHellstoneBrick"/>
+		/// </summary>
 		public static bool[] TouchDamageHot = Factory.CreateBoolSet(37, 58, 76, 684, 230);
+		/// <summary>
+		/// Applies the <see cref="BuffID.Bleeding"/> buff to any player touching the tile. The duration is random from 4 to 10 seconds. Used by <see cref="TileID.Spikes"/> and <see cref="TileID.WoodenSpikes"/>. Used in conjunction with <see cref="TouchDamageImmediate"/> to deal damage on contact.
+		/// </summary>
 		public static bool[] TouchDamageBleeding = Factory.CreateBoolSet(48, 232);
+		/// <summary>
+		/// Deals the provided amount of damage to any player in contact with the tile. Used by cactus, thorn, and spike tiles.
+		/// </summary>
 		public static int[] TouchDamageImmediate = Factory.CreateIntSet(0, 32, 10, 69, 17, 80, 6, 352, 10, 655, 100, 48, 60, 232, 80, 484, 25);
+		/// <summary>
+		/// Set to true for falling tiles, such as sand, coin piles, and shell pile. Affects block swapping falling tiles requiring 110% pickaxe power and causes blocks with this set to call <see cref="WorldGen.SpawnFallingBlockProjectile"/>, where <see cref="FallingBlockProjectile"/> is used to spawn the falling block projectile. See <see href="https://github.com/tModLoader/tModLoader/blob/stable/ExampleMod/Content/Tiles/ExampleSand.cs">the ExampleSand tile</see> and corresponding projectiles for an example.
+		/// </summary>
 		public static bool[] Falling = Factory.CreateBoolSet(53, 234, 112, 116, 224, 123, 330, 331, 332, 333, 495);
+		// Conditions taken from Main.SetupTileMerge
+		/// <summary>
+		/// Set to true automatically for all tiles that are <see cref="Main.tileSolid"/> and not <see cref="Main.tileSolidTop"/>. These tiles will merge with other tiles that are <see cref="Main.tileBlendAll"/>.
+		/// <br/>You can force a value to be assigned using <see cref="BlockMergesWithMergeAllBlockOverride"/> in <see cref="ModType.SetStaticDefaults"/>, as this is set is populated afterwards, ignoring edits to it.
+		/// </summary>
 		public static bool[] BlockMergesWithMergeAllBlock = Factory.CreateBoolSet();
 		public static bool[] OreMergesWithMud = Factory.CreateBoolSet(7, 166, 6, 167, 9, 168, 8, 169, 22, 204, 37, 58, 107, 221, 108, 222, 111, 223);
+		/// <summary>
+		/// Indicates that the tile is an ore. Used in worldgen code for various purposes and by Fairies.
+		/// </summary>
 		public static bool[] Ore = Factory.CreateBoolSet(7, 166, 6, 167, 9, 168, 8, 169, 22, 204, 37, 58, 107, 221, 108, 222, 111, 223, 211);
+		/// <summary>
+		/// Indicates that this tile contains items. All chests and dressers should set this. <see cref="Main.tileContainer"/> should also be set in tandem.
+		/// </summary>
 		public static bool[] IsAContainer = Factory.CreateBoolSet(21, 467, 88);
+		/// <summary>
+		/// Indicates that the tile is an appropriate tile to be connected to a trigger tile (<see cref="IsATrigger"/>). Used during the "Remove Broken Traps" world generation step to remove wires and tiles in situations where the mechanism or trigger have been orphaned (not connected anymore).
+		/// </summary>
 		public static bool[] IsAMechanism = Factory.CreateBoolSet(137, 443, 105, 349, 141, 142, 143, 42, 34, 130, 131, 506, 546, 557, 593, 594);
+		/// <summary>
+		/// Indicates that the tile is an appropriate tile to be connected to a mechanism tile (<see cref="IsAMechanism"/>). Used during the "Remove Broken Traps" world generation step to remove wires and tiles in situations where the mechanism or trigger have been orphaned (not connected anymore).
+		/// </summary>
 		public static bool[] IsATrigger = Factory.CreateBoolSet(135, 136, 132, 144, 411, 441, 468);
+		/// <summary>
+		/// If true, <see href="https://terraria.wiki.gg/wiki/Fairies">Fairies</see> can lead the player to this tile. The tile must also set <see cref="Main.tileOreFinderPriority"/> to be eligible. 
+		/// </summary>
 		public static bool[] FriendlyFairyCanLureTo = Factory.CreateBoolSet(8, 169, 21, 467, 107, 108, 111, 221, 222, 223, 211, 12, 665, 639, 236, 227);
 		public static bool[] IgnoredInHouseScore = Factory.CreateBoolSet(4, 3, 73, 82, 83, 84, 386);
 		public static bool[] SpreadOverground = Factory.CreateBoolSet(2, 23, 661, 32, 60, 70, 109, 199, 662, 352, 477, 492, 633);
@@ -954,5 +_,6 @@
 	public const ushort VioletMossBlock = 691;
 	public const ushort RainbowMossBlock = 692;
 	public static readonly ushort Count = 693;
+	/// <inheritdoc cref="IdDictionary"/>
 	public static readonly IdDictionary Search = IdDictionary.Create<TileID, ushort>();
 }
